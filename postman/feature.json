{
  "info": {
    "_postman_id": "f0ca2a85-1343-40b7-b6e8-866ffb15e689",
    "name": "feature",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "38982364"
  },
  "item": [
    {
      "name": "Добавление юзера",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(201);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "const source = JSON.parse(pm.request.body.raw);\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Ответ должен содержать поле id\", function () {\r",
              "    pm.expect(target).to.have.property(\"id\")\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\"name\":\"jane\",\r\n\"email\": \"jane@mail.ru\"}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/admin/users",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "admin",
            "users"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Добавление ивента",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "pm.sendRequest({\r",
              "    url: 'http://localhost:8080/admin/categories',\r",
              "    method: 'POST',\r",
              "    header: { 'Content-Type': 'application/json' },\r",
              "    body: {\r",
              "        mode: 'raw',\r",
              "        raw: JSON.stringify({ name: 'IT' })\r",
              "    }\r",
              "}, function (err, res) {\r",
              "    if (err || res.code !== 201) {\r",
              "        console.log(\"Ошибка при создании категории\", err || res);\r",
              "        return;\r",
              "    }\r",
              "\r",
              "    const categoryId = res.json().id;\r",
              "    pm.environment.set(\"categoryId\", categoryId);\r",
              "\r",
              "    const userId = pm.environment.get(\"userId\");\r",
              "\r",
              "    pm.sendRequest({\r",
              "        url: 'http://localhost:8080/users/{{userId}}/events',\r",
              "        method: 'POST',\r",
              "        header: { 'Content-Type': 'application/json' },\r",
              "        body: {\r",
              "            mode: 'raw',\r",
              "            raw: JSON.stringify({\r",
              "                title: 'Лекция по Java',\r",
              "                annotation: 'Интенсивная лекция для разработчиков уровня junior и выше.',\r",
              "                description: 'Подробный разбор многопоточности, коллекций и новых фич Java 21. Включает практику и ответы на вопросы участников.',\r",
              "                eventDate: '2025-06-15 18:30:00',\r",
              "                categoryId: categoryId,\r",
              "                location: { lat: 55.7558, lon: 37.6176 }\r",
              "            })\r",
              "        }\r",
              "    }, function (err, res) {\r",
              "        if (err || res.code !== 201) {\r",
              "            console.log(\"Ошибка при создании события\", err || res);\r",
              "            return;\r",
              "        }\r",
              "\r",
              "        const eventId = res.json().id;\r",
              "        pm.environment.set(\"eventId\", eventId);\r",
              "        console.log(\"Создано событие с ID:\", eventId);\r",
              "    });\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(201);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "const source = JSON.parse(pm.request.body.raw);\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Ответ должен содержать поля id и comments\", function () {\r",
              "    pm.expect(target).to.have.property(\"id\"),\r",
              "    pm.expect(target).to.have.property(\"comments\") \r",
              "});\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n  \"category\": 1,\r\n  \"title\": \"Лекция по Java\",\r\n  \"annotation\": \"Интенсивная лекция для разработчиков уровня junior и выше.\",\r\n  \"eventDate\": \"2025-06-15 18:30:00\",\r\n  \"paid\": false,\r\n  \"description\": \"Подробный разбор многопоточности, коллекций и новых фич Java 21. Включает практику и ответы на вопросы участников.\",\r\n  \"location\": {\r\n    \"lat\": 55.7558,\r\n    \"lon\": 37.6176\r\n  },\r\n  \"participantLimit\": 100,\r\n  \"requestModeration\": true\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/users/:userId/events",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "users",
            ":userId",
            "events"
          ],
          "variable": [
            {
              "key": "userId",
              "value": ""
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Добавление комментария",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(201);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "const source = JSON.parse(pm.request.body.raw);\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Ответ должен содержать поле id, author, text, eventId, publishedOn\", function () {\r",
              "    pm.expect(target).to.have.property(\"id\"),\r",
              "    pm.expect(target).to.have.property(\"author\"),\r",
              "    pm.expect(target).to.have.property(\"text\"),\r",
              "    pm.expect(target).to.have.property(\"eventId\"),\r",
              "    pm.expect(target).to.have.property(\"publishedOn\")\r",
              "});\r",
              "\r",
              "const commentId = pm.response.json().id;\r",
              "pm.environment.set(\"commentId\", commentId);"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n   \"text\":\"first comment\" \r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/users/:userId/events/:eventId/comment",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "users",
            ":userId",
            "events",
            ":eventId",
            "comment"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "{{userId}}"
            },
            {
              "key": "eventId",
              "value": "{{eventId}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Изменение комментария",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(200);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "const source = JSON.parse(pm.request.body.raw);\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Ответ должен содержать поле id, author, text, eventId, publishedOn\", function () {\r",
              "    pm.expect(target).to.have.property(\"id\"),\r",
              "    pm.expect(target).to.have.property(\"author\"),\r",
              "    pm.expect(target).to.have.property(\"text\"),\r",
              "    pm.expect(target).to.have.property(\"eventId\"),\r",
              "    pm.expect(target).to.have.property(\"publishedOn\")\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\":\"изменение комментария\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/users/:userId/events/:eventId/comment/:commentId",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "users",
            ":userId",
            "events",
            ":eventId",
            "comment",
            ":commentId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "{{userId}}"
            },
            {
              "key": "eventId",
              "value": "{{eventId}}"
            },
            {
              "key": "commentId",
              "value": "{{commentId}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Получение ивента с комментарием",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(200);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "const source = pm.response.json(); // Fixed JSON.parse to pm.response.json()\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Ответ должен содержать поля id и comments\", function () {\r",
              "    pm.expect(target).to.have.property(\"id\");\r",
              "    pm.expect(target).to.have.property(\"comments\");\r",
              "});\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://localhost:8080/users/{{userId}}/events/{{eventId}}",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "users",
            "{{userId}}",
            "events",
            "{{eventId}}"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Удаление комментария юзером",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
              "    pm.response.to.have.status(204)\r",
              "});\r",
              "\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "http://localhost:8080/users/:userId/events/:eventId/comment/:commentId",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "users",
            ":userId",
            "events",
            ":eventId",
            "comment",
            ":commentId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "{{userId}}"
            },
            {
              "key": "eventId",
              "value": "{{eventId}}"
            },
            {
              "key": "commentId",
              "value": "{{commentId}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Добавление комментария для админа",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(201);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "const source = pm.response.json(); \r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Ответ должен содержать поля id и text\", function () {\r",
              "    pm.expect(target).to.have.property(\"id\");\r",
              "    pm.expect(target).to.have.property(\"text\");\r",
              "});\r",
              "const commentId = target.id;\r",
              "pm.environment.set(\"commentId\", commentId);\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\":\"комментарий для админа\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/users/:userId/events/:eventId/comment",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "users",
            ":userId",
            "events",
            ":eventId",
            "comment"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "{{userId}}"
            },
            {
              "key": "eventId",
              "value": "{{eventId}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Удаление комментария админом",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
              "    pm.response.to.have.status(204)\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "http://localhost:8080/admin/events/:eventId/comment/:commentId",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "admin",
            "events",
            ":eventId",
            "comment",
            ":commentId"
          ],
          "variable": [
            {
              "key": "eventId",
              "value": "{{eventId}}"
            },
            {
              "key": "commentId",
              "value": "{{commentId}}"
            }
          ]
        }
      },
      "response": []
    }
  ]
}