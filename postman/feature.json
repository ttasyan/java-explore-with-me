
{
  "info": {
    "_postman_id": "f0ca2a85-1343-40b7-b6e8-866ffb15e689",
    "name": "feature",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "38982364"
  },
  "item": [
    {
      "name": "Добавление юзера",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(201);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "const source = JSON.parse(pm.request.body.raw);\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Ответ должен содержать поле id\", function () {\r",
              "    pm.expect(target).to.have.property(\"id\")\r",
              "});\r",
              "\r",
              "const userId = pm.response.json().id;\r",
              "pm.environment.set(\"userId\", userId);"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\"name\":\"jane\",\r\n\"email\": \"jane@mail.ru\"}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/admin/users",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "admin",
            "users"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Добавление ивента",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const createCategory = () => {\r",
              "    return new Promise((resolve, reject) => {\r",
              "        pm.sendRequest({\r",
              "            url: 'http://localhost:8080/admin/categories',\r",
              "            method: 'POST',\r",
              "            header: {\r",
              "                'Content-Type': 'application/json'\r",
              "            },\r",
              "            body: {\r",
              "                mode: 'raw',\r",
              "                raw: JSON.stringify({ name: 'IT' })\r",
              "            }\r",
              "        }, (err, res) => {\r",
              "            if (err) {\r",
              "                reject(err);\r",
              "            } else {\r",
              "                resolve(res.json());\r",
              "            }\r",
              "        });\r",
              "    });\r",
              "};\r",
              "\r",
              "(async () => {\r",
              "    try {\r",
              "        const category = await createCategory();\r",
              "        pm.collectionVariables.set(\"categoryId\", category.id);\r",
              "        console.log(\"Категория создана, ID:\", category.id);\r",
              "\r",
              "    } catch (err) {\r",
              "        console.error(\"Ошибка при создании тестовых данных:\", err);\r",
              "        throw err;\r",
              "    }\r",
              "})();"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(201);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "const source = JSON.parse(pm.request.body.raw);\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Ответ должен содержать поля id и comments\", function () {\r",
              "    pm.expect(target).to.have.property(\"id\"),\r",
              "    pm.expect(target).to.have.property(\"comments\") \r",
              "});\r",
              "const eventId = pm.response.json().id;\r",
              "pm.collectionVariables.set(\"eventId\", eventId);"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n  \"category\": 1,\r\n  \"title\": \"Лекция по Java\",\r\n  \"annotation\": \"Интенсивная лекция для разработчиков уровня junior и выше.\",\r\n  \"eventDate\": \"2025-06-15 18:30:00\",\r\n  \"paid\": false,\r\n  \"description\": \"Подробный разбор многопоточности, коллекций и новых фич Java 21. Включает практику и ответы на вопросы участников.\",\r\n  \"location\": {\r\n    \"lat\": 55.7558,\r\n    \"lon\": 37.6176\r\n  },\r\n  \"participantLimit\": 100,\r\n  \"requestModeration\": true\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/users/:userId/events",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "users",
            ":userId",
            "events"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "{{userId}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Добавление комментария",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const main = async () => {\r",
              "    const api = new API(pm);\r",
              "    const rnd = new RandomUtils();\r",
              "\r",
              "    try {\r",
              "        const user = await api.addUser(rnd.getUser());\r",
              "        pm.collectionVariables.set(\"userId\", user.id);\r",
              "\r",
              "        const category = await api.addCategory(rnd.getCategory());\r",
              "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
              "        event = await api.publishEvent(event.id);\r",
              "        pm.collectionVariables.set(\"eventId\", event.id);\r",
              "        \r",
              "        const author = await api.addUser(rnd.getUser());\r",
              "        pm.collectionVariables.set(\"authorId\", author.id);\r",
              "\r",
              "        pm.request.body.update({\r",
              "            mode: 'raw',\r",
              "            raw: JSON.stringify(rnd.getComment()),\r",
              "            options: { raw: { language: 'json' } }\r",
              "        });\r",
              "\r",
              "    } catch(err) {\r",
              "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
              "        throw err;\r",
              "    }\r",
              "};\r",
              "\r",
              "main();"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(201);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "const source = JSON.parse(pm.request.body.raw);\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Ответ должен содержать поле id, author, text, eventId, publishedOn\", function () {\r",
              "    pm.expect(target).to.have.property(\"id\"),\r",
              "    pm.expect(target).to.have.property(\"author\"),\r",
              "    pm.expect(target).to.have.property(\"text\"),\r",
              "    pm.expect(target).to.have.property(\"eventId\"),\r",
              "    pm.expect(target).to.have.property(\"publishedOn\")\r",
              "});\r",
              "\r",
              "const commentId = pm.response.json().id;\r",
              "pm.collectionVariables.set(\"commentId\", commentId);"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n   \"text\":\"first comment\" \r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/users/:userId/events/:eventId/comment",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "users",
            ":userId",
            "events",
            ":eventId",
            "comment"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "{{userId}}"
            },
            {
              "key": "eventId",
              "value": "{{eventId}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Изменение комментария",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(200);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "const source = JSON.parse(pm.request.body.raw);\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Ответ должен содержать поле id, author, text, eventId, publishedOn\", function () {\r",
              "    pm.expect(target).to.have.property(\"id\"),\r",
              "    pm.expect(target).to.have.property(\"author\"),\r",
              "    pm.expect(target).to.have.property(\"text\"),\r",
              "    pm.expect(target).to.have.property(\"eventId\"),\r",
              "    pm.expect(target).to.have.property(\"publishedOn\")\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\":\"изменение комментария\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/users/:userId/events/:eventId/comment/:commentId",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "users",
            ":userId",
            "events",
            ":eventId",
            "comment",
            ":commentId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "{{userId}}"
            },
            {
              "key": "eventId",
              "value": "{{eventId}}"
            },
            {
              "key": "commentId",
              "value": "{{commentId}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Получение ивента с комментарием",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(200);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "const source = pm.response.json(); // Fixed JSON.parse to pm.response.json()\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Ответ должен содержать поля id и comments\", function () {\r",
              "    pm.expect(target).to.have.property(\"id\");\r",
              "    pm.expect(target).to.have.property(\"comments\");\r",
              "});\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://localhost:8080/users/{{userId}}/events/{{eventId}}",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "users",
            "{{userId}}",
            "events",
            "{{eventId}}"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Удаление комментария юзером",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
              "    pm.response.to.have.status(204)\r",
              "});\r",
              "\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "http://localhost:8080/users/:userId/events/:eventId/comment/:commentId",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "users",
            ":userId",
            "events",
            ":eventId",
            "comment",
            ":commentId"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "{{userId}}"
            },
            {
              "key": "eventId",
              "value": "{{eventId}}"
            },
            {
              "key": "commentId",
              "value": "{{commentId}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Добавление комментария для админа",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(201);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "const source = pm.response.json(); \r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Ответ должен содержать поля id и text\", function () {\r",
              "    pm.expect(target).to.have.property(\"id\");\r",
              "    pm.expect(target).to.have.property(\"text\");\r",
              "});\r",
              "const commentId = target.id;\r",
              "pm.collectionVariables.set(\"commentId\", commentId);\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\":\"комментарий для админа\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "http://localhost:8080/users/:userId/events/:eventId/comment",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "users",
            ":userId",
            "events",
            ":eventId",
            "comment"
          ],
          "variable": [
            {
              "key": "userId",
              "value": "{{userId}}"
            },
            {
              "key": "eventId",
              "value": "{{eventId}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Удаление комментария админом",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
              "    pm.response.to.have.status(204)\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "http://localhost:8080/admin/events/:eventId/comment/:commentId",
          "protocol": "http",
          "host": [
            "localhost"
          ],
          "port": "8080",
          "path": [
            "admin",
            "events",
            ":eventId",
            "comment",
            ":commentId"
          ],
          "variable": [
            {
              "key": "eventId",
              "value": "{{eventId}}"
            },
            {
              "key": "commentId",
              "value": "{{commentId}}"
            }
          ]
        }
      },
      "response": []
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [
          "class API {\r",
          "    constructor(pm) {\r",
          "        this.pm = pm;\r",
          "    }\r",
          "\r",
          "    async addUser(userData) {\r",
          "        return this._sendRequest({\r",
          "            url: 'http://localhost:8080/users',\r",
          "            method: 'POST',\r",
          "            header: { 'Content-Type': 'application/json' },\r",
          "            body: {\r",
          "                mode: 'raw',\r",
          "                raw: JSON.stringify(userData)\r",
          "            }\r",
          "        });\r",
          "    }\r",
          "\r",
          "    async addCategory(category) {\r",
          "        return this._sendRequest({\r",
          "            url: 'http://localhost:8080/admin/categories',\r",
          "            method: 'POST',\r",
          "            header: { 'Content-Type': 'application/json' },\r",
          "            body: {\r",
          "                mode: 'raw',\r",
          "                raw: JSON.stringify(category)\r",
          "            }\r",
          "        });\r",
          "    }\r",
          "\r",
          "    async addEvent(userId, eventData) {\r",
          "        return this._sendRequest({\r",
          "            url: 'http://localhost:8080/users/${userId}/events',\r",
          "            method: 'POST',\r",
          "            header: { 'Content-Type': 'application/json' },\r",
          "            body: {\r",
          "                mode: 'raw',\r",
          "                raw: JSON.stringify(eventData)\r",
          "            }\r",
          "        });\r",
          "    }\r",
          "\r",
          "    async publishEvent(eventId) {\r",
          "        return this._sendRequest({\r",
          "            url: 'http://localhost:8080/events/${eventId}/publish',\r",
          "            method: 'PATCH',\r",
          "            header: { 'Content-Type': 'application/json' }\r",
          "        });\r",
          "    }\r",
          "\r",
          "    _sendRequest(options) {\r",
          "        return new Promise((resolve, reject) => {\r",
          "            this.pm.sendRequest(options, (err, res) => {\r",
          "                if (err) {\r",
          "                    reject(new Error(`Network error: ${err}`));\r",
          "                } else if (res.code < 200 || res.code >= 300) {\r",
          "                    const error = new Error(`HTTP ${res.code}: ${res.text()}`);\r",
          "                    error.response = res;\r",
          "                    reject(error);\r",
          "                } else {\r",
          "                    resolve(res.json());\r",
          "                }\r",
          "            });\r",
          "        });\r",
          "    }\r",
          "}\r",
          "\r",
          "class RandomUtils {\r",
          "    getUser() {\r",
          "        const randomId = Math.floor(Math.random() * 100000);\r",
          "        return {\r",
          "            name: 'User-${randomId}',\r",
          "            email: 'user${randomId}@test.com'\r",
          "        };\r",
          "    }\r",
          "\r",
          "    getCategory() {\r",
          "        return {\r",
          "            name: 'Category-${Date.now()}'\r",
          "        };\r",
          "    }\r",
          "\r",
          "    getEvent(categoryId) {\r",
          "        return {\r",
          "            title: 'Событие-${Date.now()}',\r",
          "            annotation: 'Интенсив для разработчиков',\r",
          "            description: 'Полный курс по Java',\r",
          "            eventDate: '2025-06-15 18:30:00',\r",
          "            categoryId: categoryId,\r",
          "            location: {\r",
          "                lat: 55.7558,\r",
          "                lon: 37.6176\r",
          "            }\r",
          "        };\r",
          "    }\r",
          "\r",
          "    getComment() {\r",
          "        return {\r",
          "            text: 'Комментарий от пользователя на ${new Date().toISOString()}'\r",
          "        };\r",
          "    }\r",
          "}\r",
          "\r",
          "pm.globals.set(\"API_READY\", true); // Флаг, если нужно проверять\r",
          "pm.globals.set(\"api\", new API(pm));\r",
          "pm.globals.set(\"rnd\", new RandomUtils());"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "userId",
      "value": "1",
      "type": "string"
    },
    {
      "key": "eventId",
      "value": "1",
      "type": "string"
    },
    {
      "key": "categoryId",
      "value": "1",
      "type": "string"
    },
    {
      "key": "commentId",
      "value": "1",
      "type": "string"
    }
  ]
}